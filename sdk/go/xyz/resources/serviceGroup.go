// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resources

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"internal"
)

type ServiceGroup struct {
	pulumi.CustomResourceState

	Icmp           ServiceGroupIcmpArrayOutput `pulumi:"icmp"`
	Icmp6          ServiceGroupIcmpArrayOutput `pulumi:"icmp6"`
	ServiceGroupId pulumi.IntOutput            `pulumi:"serviceGroupId"`
	Tcp            ServiceGroupTcpArrayOutput  `pulumi:"tcp"`
	Udp            ServiceGroupUdpArrayOutput  `pulumi:"udp"`
}

// NewServiceGroup registers a new resource with the given unique name, arguments, and options.
func NewServiceGroup(ctx *pulumi.Context,
	name string, args *ServiceGroupArgs, opts ...pulumi.ResourceOption) (*ServiceGroup, error) {
	if args == nil {
		args = &ServiceGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceGroup
	err := ctx.RegisterResource("xyz:resources:ServiceGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceGroup gets an existing ServiceGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceGroupState, opts ...pulumi.ResourceOption) (*ServiceGroup, error) {
	var resource ServiceGroup
	err := ctx.ReadResource("xyz:resources:ServiceGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceGroup resources.
type serviceGroupState struct {
}

type ServiceGroupState struct {
}

func (ServiceGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceGroupState)(nil)).Elem()
}

type serviceGroupArgs struct {
	Icmp  []ServiceGroupIcmp `pulumi:"icmp"`
	Icmp6 []ServiceGroupIcmp `pulumi:"icmp6"`
	Tcp   []ServiceGroupTcp  `pulumi:"tcp"`
	Udp   []ServiceGroupUdp  `pulumi:"udp"`
}

// The set of arguments for constructing a ServiceGroup resource.
type ServiceGroupArgs struct {
	Icmp  ServiceGroupIcmpArrayInput
	Icmp6 ServiceGroupIcmpArrayInput
	Tcp   ServiceGroupTcpArrayInput
	Udp   ServiceGroupUdpArrayInput
}

func (ServiceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceGroupArgs)(nil)).Elem()
}

type ServiceGroupInput interface {
	pulumi.Input

	ToServiceGroupOutput() ServiceGroupOutput
	ToServiceGroupOutputWithContext(ctx context.Context) ServiceGroupOutput
}

func (*ServiceGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceGroup)(nil)).Elem()
}

func (i *ServiceGroup) ToServiceGroupOutput() ServiceGroupOutput {
	return i.ToServiceGroupOutputWithContext(context.Background())
}

func (i *ServiceGroup) ToServiceGroupOutputWithContext(ctx context.Context) ServiceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceGroupOutput)
}

func (i *ServiceGroup) ToOutput(ctx context.Context) pulumix.Output[*ServiceGroup] {
	return pulumix.Output[*ServiceGroup]{
		OutputState: i.ToServiceGroupOutputWithContext(ctx).OutputState,
	}
}

type ServiceGroupOutput struct{ *pulumi.OutputState }

func (ServiceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceGroup)(nil)).Elem()
}

func (o ServiceGroupOutput) ToServiceGroupOutput() ServiceGroupOutput {
	return o
}

func (o ServiceGroupOutput) ToServiceGroupOutputWithContext(ctx context.Context) ServiceGroupOutput {
	return o
}

func (o ServiceGroupOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceGroup] {
	return pulumix.Output[*ServiceGroup]{
		OutputState: o.OutputState,
	}
}

func (o ServiceGroupOutput) Icmp() ServiceGroupIcmpArrayOutput {
	return o.ApplyT(func(v *ServiceGroup) ServiceGroupIcmpArrayOutput { return v.Icmp }).(ServiceGroupIcmpArrayOutput)
}

func (o ServiceGroupOutput) Icmp6() ServiceGroupIcmpArrayOutput {
	return o.ApplyT(func(v *ServiceGroup) ServiceGroupIcmpArrayOutput { return v.Icmp6 }).(ServiceGroupIcmpArrayOutput)
}

func (o ServiceGroupOutput) ServiceGroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *ServiceGroup) pulumi.IntOutput { return v.ServiceGroupId }).(pulumi.IntOutput)
}

func (o ServiceGroupOutput) Tcp() ServiceGroupTcpArrayOutput {
	return o.ApplyT(func(v *ServiceGroup) ServiceGroupTcpArrayOutput { return v.Tcp }).(ServiceGroupTcpArrayOutput)
}

func (o ServiceGroupOutput) Udp() ServiceGroupUdpArrayOutput {
	return o.ApplyT(func(v *ServiceGroup) ServiceGroupUdpArrayOutput { return v.Udp }).(ServiceGroupUdpArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceGroupInput)(nil)).Elem(), &ServiceGroup{})
	pulumi.RegisterOutputType(ServiceGroupOutput{})
}
