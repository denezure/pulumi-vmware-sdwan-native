// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resources

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"internal"
)

type AddressGroup struct {
	pulumi.CustomResourceState

	AddressGroupId pulumi.IntOutput         `pulumi:"addressGroupId"`
	Domains        pulumi.StringArrayOutput `pulumi:"domains"`
	Prefixes       pulumi.StringArrayOutput `pulumi:"prefixes"`
}

// NewAddressGroup registers a new resource with the given unique name, arguments, and options.
func NewAddressGroup(ctx *pulumi.Context,
	name string, args *AddressGroupArgs, opts ...pulumi.ResourceOption) (*AddressGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domains == nil {
		return nil, errors.New("invalid value for required argument 'Domains'")
	}
	if args.Prefixes == nil {
		return nil, errors.New("invalid value for required argument 'Prefixes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AddressGroup
	err := ctx.RegisterResource("xyz:resources:AddressGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAddressGroup gets an existing AddressGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAddressGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AddressGroupState, opts ...pulumi.ResourceOption) (*AddressGroup, error) {
	var resource AddressGroup
	err := ctx.ReadResource("xyz:resources:AddressGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AddressGroup resources.
type addressGroupState struct {
}

type AddressGroupState struct {
}

func (AddressGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*addressGroupState)(nil)).Elem()
}

type addressGroupArgs struct {
	Domains  []string `pulumi:"domains"`
	Prefixes []string `pulumi:"prefixes"`
}

// The set of arguments for constructing a AddressGroup resource.
type AddressGroupArgs struct {
	Domains  pulumi.StringArrayInput
	Prefixes pulumi.StringArrayInput
}

func (AddressGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*addressGroupArgs)(nil)).Elem()
}

type AddressGroupInput interface {
	pulumi.Input

	ToAddressGroupOutput() AddressGroupOutput
	ToAddressGroupOutputWithContext(ctx context.Context) AddressGroupOutput
}

func (*AddressGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressGroup)(nil)).Elem()
}

func (i *AddressGroup) ToAddressGroupOutput() AddressGroupOutput {
	return i.ToAddressGroupOutputWithContext(context.Background())
}

func (i *AddressGroup) ToAddressGroupOutputWithContext(ctx context.Context) AddressGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressGroupOutput)
}

func (i *AddressGroup) ToOutput(ctx context.Context) pulumix.Output[*AddressGroup] {
	return pulumix.Output[*AddressGroup]{
		OutputState: i.ToAddressGroupOutputWithContext(ctx).OutputState,
	}
}

type AddressGroupOutput struct{ *pulumi.OutputState }

func (AddressGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressGroup)(nil)).Elem()
}

func (o AddressGroupOutput) ToAddressGroupOutput() AddressGroupOutput {
	return o
}

func (o AddressGroupOutput) ToAddressGroupOutputWithContext(ctx context.Context) AddressGroupOutput {
	return o
}

func (o AddressGroupOutput) ToOutput(ctx context.Context) pulumix.Output[*AddressGroup] {
	return pulumix.Output[*AddressGroup]{
		OutputState: o.OutputState,
	}
}

func (o AddressGroupOutput) AddressGroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *AddressGroup) pulumi.IntOutput { return v.AddressGroupId }).(pulumi.IntOutput)
}

func (o AddressGroupOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AddressGroup) pulumi.StringArrayOutput { return v.Domains }).(pulumi.StringArrayOutput)
}

func (o AddressGroupOutput) Prefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AddressGroup) pulumi.StringArrayOutput { return v.Prefixes }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AddressGroupInput)(nil)).Elem(), &AddressGroup{})
	pulumi.RegisterOutputType(AddressGroupOutput{})
}
