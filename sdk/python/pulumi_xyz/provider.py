# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 vco_api_key: pulumi.Input[str],
                 vco_url: pulumi.Input[str]):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] vco_api_key: API key for the VCO
        :param pulumi.Input[str] vco_url: FQDN of the VCO
        """
        ProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            vco_api_key=vco_api_key,
            vco_url=vco_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             vco_api_key: pulumi.Input[str],
             vco_url: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("vco_api_key", vco_api_key)
        _setter("vco_url", vco_url)

    @property
    @pulumi.getter(name="vcoApiKey")
    def vco_api_key(self) -> pulumi.Input[str]:
        """
        API key for the VCO
        """
        return pulumi.get(self, "vco_api_key")

    @vco_api_key.setter
    def vco_api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "vco_api_key", value)

    @property
    @pulumi.getter(name="vcoUrl")
    def vco_url(self) -> pulumi.Input[str]:
        """
        FQDN of the VCO
        """
        return pulumi.get(self, "vco_url")

    @vco_url.setter
    def vco_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "vco_url", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 vco_api_key: Optional[pulumi.Input[str]] = None,
                 vco_url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Xyz resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] vco_api_key: API key for the VCO
        :param pulumi.Input[str] vco_url: FQDN of the VCO
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Xyz resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ProviderArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 vco_api_key: Optional[pulumi.Input[str]] = None,
                 vco_url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if vco_api_key is None and not opts.urn:
                raise TypeError("Missing required property 'vco_api_key'")
            __props__.__dict__["vco_api_key"] = None if vco_api_key is None else pulumi.Output.secret(vco_api_key)
            if vco_url is None and not opts.urn:
                raise TypeError("Missing required property 'vco_url'")
            __props__.__dict__["vco_url"] = vco_url
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["vcoApiKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'xyz',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="vcoApiKey")
    def vco_api_key(self) -> pulumi.Output[str]:
        """
        API key for the VCO
        """
        return pulumi.get(self, "vco_api_key")

    @property
    @pulumi.getter(name="vcoUrl")
    def vco_url(self) -> pulumi.Output[str]:
        """
        FQDN of the VCO
        """
        return pulumi.get(self, "vco_url")

