# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ServiceGroupIcmpArgs',
    'ServiceGroupTcpArgs',
    'ServiceGroupUdpArgs',
]

@pulumi.input_type
class ServiceGroupIcmpArgs:
    def __init__(__self__, *,
                 code_high: pulumi.Input[int],
                 code_low: pulumi.Input[int],
                 icmp_type: pulumi.Input[int]):
        ServiceGroupIcmpArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code_high=code_high,
            code_low=code_low,
            icmp_type=icmp_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code_high: pulumi.Input[int],
             code_low: pulumi.Input[int],
             icmp_type: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("code_high", code_high)
        _setter("code_low", code_low)
        _setter("icmp_type", icmp_type)

    @property
    @pulumi.getter(name="codeHigh")
    def code_high(self) -> pulumi.Input[int]:
        return pulumi.get(self, "code_high")

    @code_high.setter
    def code_high(self, value: pulumi.Input[int]):
        pulumi.set(self, "code_high", value)

    @property
    @pulumi.getter(name="codeLow")
    def code_low(self) -> pulumi.Input[int]:
        return pulumi.get(self, "code_low")

    @code_low.setter
    def code_low(self, value: pulumi.Input[int]):
        pulumi.set(self, "code_low", value)

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> pulumi.Input[int]:
        return pulumi.get(self, "icmp_type")

    @icmp_type.setter
    def icmp_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "icmp_type", value)


@pulumi.input_type
class ServiceGroupTcpArgs:
    def __init__(__self__, *,
                 port_end: pulumi.Input[int],
                 port_start: pulumi.Input[int]):
        ServiceGroupTcpArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port_end=port_end,
            port_start=port_start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port_end: pulumi.Input[int],
             port_start: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("port_end", port_end)
        _setter("port_start", port_start)

    @property
    @pulumi.getter(name="portEnd")
    def port_end(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_end")

    @port_end.setter
    def port_end(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_end", value)

    @property
    @pulumi.getter(name="portStart")
    def port_start(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_start")

    @port_start.setter
    def port_start(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_start", value)


@pulumi.input_type
class ServiceGroupUdpArgs:
    def __init__(__self__, *,
                 port_end: pulumi.Input[int],
                 port_start: pulumi.Input[int]):
        ServiceGroupUdpArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port_end=port_end,
            port_start=port_start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port_end: pulumi.Input[int],
             port_start: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("port_end", port_end)
        _setter("port_start", port_start)

    @property
    @pulumi.getter(name="portEnd")
    def port_end(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_end")

    @port_end.setter
    def port_end(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_end", value)

    @property
    @pulumi.getter(name="portStart")
    def port_start(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_start")

    @port_start.setter
    def port_start(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_start", value)


