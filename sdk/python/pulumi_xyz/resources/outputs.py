# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ServiceGroupIcmp',
    'ServiceGroupTcp',
    'ServiceGroupUdp',
]

@pulumi.output_type
class ServiceGroupIcmp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeHigh":
            suggest = "code_high"
        elif key == "codeLow":
            suggest = "code_low"
        elif key == "icmpType":
            suggest = "icmp_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceGroupIcmp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceGroupIcmp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceGroupIcmp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code_high: int,
                 code_low: int,
                 icmp_type: int):
        ServiceGroupIcmp._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code_high=code_high,
            code_low=code_low,
            icmp_type=icmp_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code_high: int,
             code_low: int,
             icmp_type: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("code_high", code_high)
        _setter("code_low", code_low)
        _setter("icmp_type", icmp_type)

    @property
    @pulumi.getter(name="codeHigh")
    def code_high(self) -> int:
        return pulumi.get(self, "code_high")

    @property
    @pulumi.getter(name="codeLow")
    def code_low(self) -> int:
        return pulumi.get(self, "code_low")

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> int:
        return pulumi.get(self, "icmp_type")


@pulumi.output_type
class ServiceGroupTcp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portEnd":
            suggest = "port_end"
        elif key == "portStart":
            suggest = "port_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceGroupTcp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceGroupTcp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceGroupTcp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_end: int,
                 port_start: int):
        ServiceGroupTcp._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port_end=port_end,
            port_start=port_start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port_end: int,
             port_start: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("port_end", port_end)
        _setter("port_start", port_start)

    @property
    @pulumi.getter(name="portEnd")
    def port_end(self) -> int:
        return pulumi.get(self, "port_end")

    @property
    @pulumi.getter(name="portStart")
    def port_start(self) -> int:
        return pulumi.get(self, "port_start")


@pulumi.output_type
class ServiceGroupUdp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portEnd":
            suggest = "port_end"
        elif key == "portStart":
            suggest = "port_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceGroupUdp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceGroupUdp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceGroupUdp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_end: int,
                 port_start: int):
        ServiceGroupUdp._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port_end=port_end,
            port_start=port_start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port_end: int,
             port_start: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("port_end", port_end)
        _setter("port_start", port_start)

    @property
    @pulumi.getter(name="portEnd")
    def port_end(self) -> int:
        return pulumi.get(self, "port_end")

    @property
    @pulumi.getter(name="portStart")
    def port_start(self) -> int:
        return pulumi.get(self, "port_start")


