// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class ServiceGroup extends pulumi.CustomResource {
    /**
     * Get an existing ServiceGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ServiceGroup {
        return new ServiceGroup(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'veco:resources:ServiceGroup';

    /**
     * Returns true if the given object is an instance of ServiceGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceGroup.__pulumiType;
    }

    public readonly icmp!: pulumi.Output<outputs.resources.ServiceGroupIcmp[] | undefined>;
    public readonly icmp6!: pulumi.Output<outputs.resources.ServiceGroupIcmp[] | undefined>;
    public /*out*/ readonly serviceGroupId!: pulumi.Output<number>;
    public readonly tcp!: pulumi.Output<outputs.resources.ServiceGroupTcp[] | undefined>;
    public readonly udp!: pulumi.Output<outputs.resources.ServiceGroupUdp[] | undefined>;

    /**
     * Create a ServiceGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServiceGroupArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["icmp"] = args ? args.icmp : undefined;
            resourceInputs["icmp6"] = args ? args.icmp6 : undefined;
            resourceInputs["tcp"] = args ? args.tcp : undefined;
            resourceInputs["udp"] = args ? args.udp : undefined;
            resourceInputs["serviceGroupId"] = undefined /*out*/;
        } else {
            resourceInputs["icmp"] = undefined /*out*/;
            resourceInputs["icmp6"] = undefined /*out*/;
            resourceInputs["serviceGroupId"] = undefined /*out*/;
            resourceInputs["tcp"] = undefined /*out*/;
            resourceInputs["udp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ServiceGroup resource.
 */
export interface ServiceGroupArgs {
    icmp?: pulumi.Input<pulumi.Input<inputs.resources.ServiceGroupIcmpArgs>[]>;
    icmp6?: pulumi.Input<pulumi.Input<inputs.resources.ServiceGroupIcmpArgs>[]>;
    tcp?: pulumi.Input<pulumi.Input<inputs.resources.ServiceGroupTcpArgs>[]>;
    udp?: pulumi.Input<pulumi.Input<inputs.resources.ServiceGroupUdpArgs>[]>;
}
